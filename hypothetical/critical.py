# encoding=utf-8


"""
Functions for finding the critical value of a particular test statistic given the necessary parameters. Critical
value tables implemented as dictionaries are also provided.

Critical Value Lookup Functions
-------------------------------

.. autosummary::
    :toctree: generated/

    w_critical_value
    chi_square_critical_value

Critical Value Tables
---------------------

.. autosummary::
    :toctree: generated/

    chi_square_critical_value_table
    w_critical_value_table

"""

from numpy import nan


def chi_square_critical_value(alpha, dof):
    r"""
    Finds the :math:`\chi^2` critical value given the input alpha-level and degrees of freedom.

    Parameters
    ----------
    alpha : float, {0.995, 0.99, 0.975, 0.95, 0.90, 0.10, 0.05, 0.025, 0.01, and 0.005}
        Desired alpha-level for the chi-square critical value.
    dof : int
        Degrees of freedom of the sample observations. Cannot be greater than 30 as critical values are
        not defined.

    Returns
    -------
    chi_crit : float
        The chi-square critical value found from the critical value table.

    Raises
    ------
    ValueError
        If parameter :code:`dof` is greater than 30.
    ValueError
        If parameter :code:`alpha` is not one of (0.995, 0.99, 0.975, 0.95, 0.90, 0.10, 0.05, 0.025, 0.01, and 0.005)

    References
    ----------
    Corder, G.W.; Foreman, D.I. (2014). Nonparametric Statistics: A Step-by-Step Approach.
        Wiley. ISBN 978-1118840313.

    """
    if isinstance(alpha, str):
        alpha = float(alpha)
    if isinstance(dof, str) or isinstance(dof, int) is False:
        dof = int(dof)

    if dof > 30:
        raise ValueError('chi-square critical value table only provides values for degrees of freedom <= 30')
    if alpha not in (0.995, 0.99, 0.975, 0.95, 0.90, 0.10, 0.05, 0.025, 0.01, 0.005):
        raise ValueError('chi-square critical value table only provides critical values for alpha levels ' + \
                         '0.995, 0.99, 0.975, 0.95, 0.90, 0.10, 0.05, 0.025, 0.01, and 0.005')

    chi_crit = chi_square_critical_value_table[alpha][dof]

    return chi_crit


def u_critical_value(n, m, alpha):
    pass

def w_critical_value(n, alpha, alternative):
    r"""
    Finds the :math:`W`-statistic critical value given the input parameters.

    Parameters
    ----------
    n : int
        The number of sample observations. Critical values are only given for :math:`n \geq 30`.
    alpha : float, {0.05, 0.01}
        Given alpha level. Critical values are only given for :math:`0.05` and :math:`0.01`.
    alternative : str
        Alternative hypothesis. Must be one of 'one-tail' or 'two-tail'.

    Returns
    -------
    w_crit : float
        The :math:`W`-statistic critical value.

    Raises
    ------
    ValueError
        If parameter :code:`n` is greater than 30.
    ValueError
        If parameter :code:`alpha` is not one of 0.05 or 0.01.
    ValueError
        If parameter :code:`alternative` is not one of 'one-tail' or 'two-tail'.

    """
    if isinstance(n, str):
        n = int(n)
    if isinstance(alpha, str):
        alpha = float(alpha)

    if n > 30:
        raise ValueError('W critical values are only provided for n <= 30.')
    if alpha not in (0.05, 0.01):
        raise ValueError('W critical values are only provided for alpha values 0.05 and 0.01.')
    if alternative not in ('one-tail', 'two-tail'):
        raise ValueError("alternative must be one of 'one-tail' or 'two-tail'.")

    w_crit = w_critical_value_table[alternative][alpha][n]

    return w_crit


"""
The following section contains the critical value tables written as dictionaries.

Critical Value Tables
---------------------

.. autosummary::
    :toctree: generated/

    chi_square_critical_value_table
    w_critical_value_table

"""

chi_square_critical_value_table = {
    0.995: {
        1: nan,
        2: 0.010,
        3: 0.072,
        4: 0.207,
        5: 0.412,
        6: 0.676,
        7: 0.989,
        8: 1.344,
        9: 1.735,
        10: 2.156,
        11: 2.603,
        12: 3.074,
        13: 3.565,
        14: 4.074,
        15: 4.601,
        16: 5.142,
        17: 5.697,
        18: 6.265,
        19: 6.844,
        20: 7.434,
        21: 8.034,
        22: 8.643,
        23: 9.260,
        24: 9.886,
        25: 10.520,
        26: 11.160,
        27: 11.808,
        28: 12.461,
        29: 13.121,
        30: 13.787
    },
    0.99: {
        1: nan,
        2: 0.020,
        3: 0.115,
        4: 0.297,
        5: 0.554,
        6: 0.872,
        7: 1.239,
        8: 1.646,
        9: 2.088,
        10: 2.558,
        11: 3.053,
        12: 3.571,
        13: 4.107,
        14: 4.660,
        15: 5.229,
        16: 5.812,
        17: 6.408,
        18: 7.015,
        19: 7.633,
        20: 8.260,
        21: 8.897,
        22: 9.542,
        23: 10.196,
        24: 10.856,
        25: 11.524,
        26: 12.198,
        27: 12.879,
        28: 13.565,
        29: 14.256,
        30: 14.953
    },
    0.975: {
        1: 0.001,
        2: 0.051,
        3: 0.216,
        4: 0.484,
        5: 0.831,
        6: 1.237,
        7: 1.690,
        8: 2.180,
        9: 2.700,
        10: 3.247,
        11: 3.816,
        12: 4.404,
        13: 5.009,
        14: 5.629,
        15: 6.262,
        16: 6.908,
        17: 7.564,
        18: 8.231,
        19: 8.907,
        20: 9.591,
        21: 10.283,
        22: 10.982,
        23: 11.689,
        24: 12.401,
        25: 13.120,
        26: 13.844,
        27: 14.573,
        28: 15.308,
        29: 16.047,
        30: 16.791
    },
    0.95: {
        1: 0.004,
        2: 0.103,
        3: 0.352,
        4: 0.711,
        5: 1.145,
        6: 1.635,
        7: 2.167,
        8: 2.733,
        9: 3.325,
        10: 3.940,
        11: 4.575,
        12: 5.226,
        13: 5.892,
        14: 6.571,
        15: 7.261,
        16: 7.962,
        17: 8.672,
        18: 9.390,
        19: 10.117,
        20: 10.851,
        21: 11.591,
        22: 12.338,
        23: 13.091,
        24: 13.848,
        25: 14.611,
        26: 15.379,
        27: 16.151,
        28: 16.928,
        29: 17.708,
        30: 18.493
    },
    0.90: {
        1: 0.016,
        2: 0.211,
        3: 0.584,
        4: 1.064,
        5: 1.610,
        6: 2.204,
        7: 2.833,
        8: 3.490,
        9: 4.168,
        10: 4.865,
        11: 5.578,
        12: 6.304,
        13: 7.042,
        14: 7.790,
        15: 8.547,
        16: 9.312,
        17: 10.085,
        18: 10.865,
        19: 11.651,
        20: 12.443,
        21: 13.240,
        22: 14.041,
        23: 14.848,
        24: 15.659,
        25: 16.473,
        26: 17.292,
        27: 18.114,
        28: 18.939,
        29: 19.768,
        30: 20.599
    },
    0.10: {
        1: 2.706,
        2: 4.605,
        3: 6.251,
        4: 7.779,
        5: 9.236,
        6: 10.645,
        7: 12.017,
        8: 13.362,
        9: 14.684,
        10: 15.987,
        11: 17.275,
        12: 18.549,
        13: 19.812,
        14: 21.064,
        15: 22.307,
        16: 23.542,
        17: 24.769,
        18: 25.989,
        19: 27.204,
        20: 28.412,
        21: 29.615,
        22: 30.813,
        23: 32.007,
        24: 33.196,
        25: 34.382,
        26: 35.563,
        27: 36.741,
        28: 37.916,
        29: 39.087,
        30: 40.256
    },
    0.05: {
        1: 3.841,
        2: 5.991,
        3: 7.815,
        4: 9.488,
        5: 11.070,
        6: 12.592,
        7: 14.067,
        8: 15.507,
        9: 16.919,
        10: 18.307,
        11: 19.675,
        12: 21.026,
        13: 22.362,
        14: 23.685,
        15: 24.996,
        16: 26.296,
        17: 27.587,
        18: 28.869,
        19: 30.144,
        20: 31.410,
        21: 32.671,
        22: 33.924,
        23: 35.172,
        24: 36.415,
        25: 37.652,
        26: 38.885,
        27: 40.113,
        28: 41.337,
        29: 42.557,
        30: 43.773
    },
    0.025: {
        1: 5.024,
        2: 7.378,
        3: 9.348,
        4: 11.143,
        5: 12.833,
        6: 14.449,
        7: 16.013,
        8: 17.535,
        9: 19.023,
        10: 20.483,
        11: 21.920,
        12: 23.337,
        13: 24.736,
        14: 26.119,
        15: 27.488,
        16: 28.845,
        17: 30.191,
        18: 31.526,
        19: 32.852,
        20: 34.170,
        21: 35.479,
        22: 36.781,
        23: 38.076,
        24: 39.364,
        25: 40.646,
        26: 41.923,
        27: 43.195,
        28: 44.461,
        29: 45.722,
        30: 46.979
    },
    0.01: {
        1: 6.635,
        2: 9.210,
        3: 11.345,
        4: 13.277,
        5: 15.086,
        6: 16.812,
        7: 18.475,
        8: 20.090,
        9: 21.666,
        10: 23.209,
        11: 24.725,
        12: 26.217,
        13: 27.688,
        14: 29.141,
        15: 30.578,
        16: 32.000,
        17: 33.409,
        18: 34.805,
        19: 36.191,
        20: 37.566,
        21: 38.932,
        22: 40.289,
        23: 21.638,
        24: 42.980,
        25: 44.314,
        26: 45.642,
        27: 46.963,
        28: 48.278,
        29: 49.588,
        30: 50.892
    },
    0.005: {
        1: 7.879,
        2: 10.597,
        3: 12.838,
        4: 14.860,
        5: 16.750,
        6: 18.548,
        7: 20.278,
        8: 21.955,
        9: 23.589,
        10: 25.188,
        11: 26.757,
        12: 28.300,
        13: 29.819,
        14: 31.319,
        15: 32.801,
        16: 34.267,
        17: 35.718,
        18: 37.156,
        19: 38.582,
        20: 39.997,
        21: 41.401,
        22: 42.796,
        23: 44.181,
        24: 45.559,
        25: 46.928,
        26: 48.920,
        27: 49.645,
        28: 50.993,
        29: 52.336,
        30: 53.672
    }
}


u_critical_value_table = {
    0.10: {
        (1, 9): 0,
        (1, 10): 0,
        (1, 11): 0,
        (1, 12): 0,
        (1, 13): 0,
        (1, 14): 0,
        (1, 15): 0,
        (1, 16): 0,
        (1, 17): 0,
        (1, 18): 0,
        (1, 19): 1,
        (1, 20): 1,
        (2, 3): 0,
        (2, 4): 0,
        (2, 5): 1,
        (2, 6): 1,
        (2, 7): 1,
        (2, 8): 2,
        (2, 9): 2,
        (2, 10): 3,
        (2, 11): 3,
        (2, 12): 4,
        (2, 13): 4,
        (2, 14): 5,
        (2, 15): 5,
        (2, 16): 5,
        (2, 17): 6,
        (2, 18): 6,
        (2, 19): 7,
        (2, 20): 7,
        (3, 3): 1,
        (3, 4): 1,
        (3, 5): 2,
        (3, 6): 3,
        (3, 7): 4,
        (3, 8): 5,
        (3, 9): 5,
        (3, 10): 6,
        (3, 11): 7,
        (3, 12): 8,
        (3, 13): 9,
        (3, 14): 10,
        (3, 15): 10,
        (3, 16): 11,
        (3, 17): 12,
        (3, 18): 13,
        (3, 19): 14,
        (3, 20): 15,
        (4, 4): 3,
        (4, 5): 4,
        (4, 6): 5,
        (4, 7): 6,
        (4, 8): 7,
        (4, 9): 9,
        (4, 10): 10,
        (4, 11): 11,
        (4, 12): 12,
        (4, 13): 13,
        (4, 14): 15,
        (4, 15): 16,
        (4, 16): 17,
        (4, 17): 18,
        (4, 18): 20,
        (4, 19): 21,
        (4, 20): 22,
        (5, 5): 5,
        (5, 6): 7,
        (5, 7): 8,
        (5, 8): 10,
        (5, 9): 12,
        (5, 10): 13,
        (5, 11): 15,
        (5, 12): 17,
        (5, 13): 18,
        (5, 14): 20,
        (5, 15): 22,
        (5, 16): 23,
        (5, 17): 25,
        (5, 18): 27,
        (5, 19): 28,
        (5, 20): 30,
        (6, 6): 9,
        (6, 7): 11,
        (6, 8): 13,
        (6, 9): 15,
        (6, 10): 17,
        (6, 11): 19,
        (6, 12): 21,
        (6, 13): 23,
        (6, 14): 25,
        (6, 15): 27,
        (6, 16): 29,
        (6, 17): 31,
        (6, 18): 34,
        (6, 19): 36,
        (6, 20): 38,
        (7, 7): 13,
        (7, 8): 16,
        (7, 9): 18,
        (7, 10): 21,
        (7, 11): 23,
        (7, 12): 26,
        (7, 13): 28,
        (7, 14): 31,
        (7, 15): 33,
        (7, 16): 36,
        (7, 17): 38,
        (7, 18): 41,
        (7, 19): 43,
        (7, 20): 46,
        (8, 8): 19,
        (8, 9): 22,
        (8, 10): 24,
        (8, 11): 27,
        (8, 12): 30,
        (8, 13): 33,
        (8, 14): 36,
        (8, 15): 39,
        (8, 16): 42,
        (8, 17): 45,
        (8, 18): 48,
        (8, 19): 51,
        (8, 20): 54,
        (9, 9): 25,
        (9, 10): 28,
        (9, 11): 31,
        (9, 12): 35,
        (9, 13): 38,
        (9, 14): 41,
        (9, 15): 45,
        (9, 16): 48,
        (9, 17): 52,
        (9, 18): 55,
        (9, 19): 58,
        (9, 20): 62,
        (10, 10): 32,
        (10, 11): 36,
        (10, 12): 39,
        (10, 13): 43,
        (10, 14): 47,
        (10, 15): 51,
        (10, 16): 54,
        (10, 17): 58,
        (10, 18): 62,
        (10, 19): 66,
        (10, 20): 70,
        (11, 11): 40,
        (11, 12): 44,
        (11, 13): 48,
        (11, 14): 52,
        (11, 15): 57,
        (11, 16): 61,
        (11, 17): 65,
        (11, 18): 69,
        (11, 19): 73,
        (11, 20): 78,
        (12, 12): 49,
        (12, 13): 53,
        (12, 14): 58,
        (12, 15): 63,
        (12, 16): 67,
        (12, 17): 72,
        (12, 18): 77,
        (12, 19): 81,
        (12, 20): 86,
        (13, 13): 58
        
    }
}


w_critical_value_table = {
    'one-tail': {
        0.01: {
            5: nan,
            6: nan,
            7: 0,
            8: 1,
            9: 3,
            10: 5,
            11: 7,
            12: 9,
            13: 12,
            14: 15,
            15: 19,
            16: 23,
            17: 27,
            18: 32,
            19: 37,
            20: 43,
            21: 49,
            22: 55,
            23: 62,
            24: 69,
            25: 76,
            26: 84,
            27: 92,
            28: 101,
            29: 110,
            30: 120
        },
        0.05: {
            5: 0,
            6: 2,
            7: 3,
            8: 5,
            9: 8,
            10: 10,
            11: 13,
            12: 17,
            13: 21,
            14: 25,
            15: 30,
            16: 35,
            17: 41,
            18: 47,
            19: 53,
            20: 60,
            21: 67,
            22: 75,
            23: 83,
            24: 91,
            25: 100,
            26: 110,
            27: 119,
            28: 130,
            29: 140,
            30: 151
        }
    },
    'two-tail': {
        0.01: {
            5: nan,
            6: nan,
            7: nan,
            8: 0,
            9: 1,
            10: 3,
            11: 5,
            12: 7,
            13: 9,
            14: 12,
            15: 15,
            16: 19,
            17: 23,
            18: 27,
            19: 32,
            20: 37,
            21: 42,
            22: 48,
            23: 54,
            24: 61,
            25: 68,
            26: 75,
            27: 83,
            28: 91,
            29: 100,
            30: 109
        },
        0.05: {
            5: nan,
            6: 0,
            7: 2,
            8: 3,
            9: 5,
            10: 8,
            11: 10,
            12: 13,
            13: 17,
            14: 21,
            15: 25,
            16: 29,
            17: 34,
            18: 40,
            19: 46,
            20: 52,
            21: 58,
            22: 65,
            23: 73,
            24: 81,
            25: 89,
            26: 98,
            27: 107,
            28: 116,
            29: 126,
            30: 137
        }
    }
}
